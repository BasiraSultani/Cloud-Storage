<?php
/**
 * Plugin Name: Cloud Storage
 * Plugin URI: 
 * Description: Google cloud storage plugin, OneDrive storage
 * Version: 1.0
 * Author: Matin
 * Author URI: 
 */
require_once __DIR__ . '/vendor/autoload.php'; // Path to the autoload file generated by Composer
use Google\Cloud\Storage\StorageClient;
use GuzzleHttp\Client;
use League\OAuth2\Client\Provider\GenericProvider;


if (!defined('ABSPATH')) {
	exit;
}

class CLOUS_MT_STORAGE_API
{

	private $storageClient;

	public function __construct()
	{
		// Correct usage of registering hooks within class context
		register_activation_hook(__FILE__, array($this, 'cloud_storage_activate'));
		register_deactivation_hook(__FILE__, array($this, 'cloud_storage_deactivate'));

		//define settings_fields for google storage
		add_action('admin_init', array($this, 'register_cloud_storage_settings'));

		// Correctly referencing the class method for the admin_menu hook
		add_action('admin_menu', array($this, 'cloud_storage_menu'));

		// Register shortcode for Google Storage recent files
		add_shortcode('google_storage_recent_files', array($this, 'google_storage_recent_files'));

		// Register shortcode for Google Storage space
		add_shortcode('google_storage_space', array($this, 'google_storage_space'));

		// Register shortcode for OneDrive recent files
		add_shortcode('onedrive_storage_recent_files', array($this, 'onedrive_storage_recent_files'));

		// Register shortcode for OneDrive space
		add_shortcode('onedrive_storage_space', array($this, 'onedrive_storage_space'));
	}

	public function register_cloud_storage_settings()
	{
		// Register settings for Google Storage credentials
		register_setting(
			'google-storage-settings',
			'google_storage_credentials',
			array(
				'type' => 'string',
				'sanitize_callback' => array($this, 'handle_file_upload')
			)
		);

		// Add settings section for Google Storage
		add_settings_section(
			'google_storage_settings_section',
			'Google Storage API Settings',
			function () {
				echo '<p>Enter your Google Storage API settings below:</p>';
			},
			'google-storage-settings'
		);

		// Add settings fields for Google Storage credentials and other information
		add_settings_field(
			'google_storage_credentials',
			'Google Storage Credentials',
			array($this, 'google_storage_credentials_field_callback'),
			'google-storage-settings',
			'google_storage_settings_section'
		);

		/* fields for one drive storage
							 $clientId = 'your-client-id';
							 $clientSecret = 'your-client-secret';
							 $clientTenant = 'your-tenantid';
							 $redirectUri = 'your-redirect-uri';
							 */
		register_setting('onedrive-storage', 'onedrive_client_id');
		register_setting('onedrive-storage', 'onedrive_client_secret');
		register_setting('onedrive-storage', 'onedrive_tenant_id');
		register_setting('onedrive-storage', 'onedrive_redirect_uri');

		add_settings_section(
			'onedrive_storage_settings_section',   // Section ID
			'OneDrive API Settings',              // Section title
			function () {
				echo '<p>Enter your OneDrive API settings below:</p>';
			}, // Callback for rendering the description of the section
			'onedrive-storage'                 // Page on which to add the section
		);

		add_settings_field(
			'onedrive_client_id',                // Field ID
			'Client ID',                        // Field title
			array($this, 'onedrive_client_id_field_callback'), // Callback for rendering the field
			'onedrive-storage',                 // Page on which to add the field
			'onedrive_storage_settings_section'  // Section to which the field belongs
		);

		add_settings_field(
			'onedrive_client_secret',            // Field ID
			'Client Secret',                    // Field title
			array($this, 'onedrive_client_secret_field_callback'), // Callback for rendering the field
			'onedrive-storage',                 // Page on which to add the field
			'onedrive_storage_settings_section'  // Section to which the field belongs
		);

		add_settings_field(
			'onedrive_tenant_id',     // Field ID
			'Tenant ID',                     // Field title
			array($this, 'onedrive_tenant_id_field_callback'), // Callback for rendering the field
			'onedrive-storage',                 // Page on which to add the field
			'onedrive_storage_settings_section'  // Section to which the field belongs
		);

		add_settings_field(
			'onedrive_redirect_uri',             // Field ID
			'Redirect URI',                     // Field title
			array($this, 'onedrive_redirect_uri_field_callback'), // Callback for rendering the field
			'onedrive-storage',                 // Page on which to add the field
			'onedrive_storage_settings_section'  // Section to which the field belongs
		);
	}

	// Callback for the Google Storage credentials settings field
	public function google_storage_credentials_field_callback()
	{
		$option = get_option('google_storage_credentials');
		// Output the field for uploading a credentials file
		echo '<input type="file" name="google_storage_credentials" />';

		// If there's a file already, display it
		if (!empty($option)) {
			echo '<p>Current file: ' . esc_html($option) . '</p>';
		}
	}

	// Handle file upload and return an option value to be saved
	// Handle file upload and return an option value to be saved
	public function handle_file_upload($option)
	{
		if (isset($_FILES['google_storage_credentials']) && $_FILES['google_storage_credentials']['error'] === UPLOAD_ERR_OK) {
			// Path where the uploaded file will be stored
			$upload_dir = plugin_dir_path(__FILE__) . 'credentials/'; // Ensure this directory exists and is writable
			$uploaded_file_path = $upload_dir . basename($_FILES['google_storage_credentials']['name']);

			// Ensure the upload directory is writable
			if (!is_writable($upload_dir)) {
				error_log('Upload directory is not writable');
				return $option;
			}

			// Move the uploaded file to the credentials directory
			if (move_uploaded_file($_FILES['google_storage_credentials']['tmp_name'], $uploaded_file_path)) {
				// Set appropriate permissions on the file
				chmod($uploaded_file_path, 0640);
				return $uploaded_file_path; // Return the new file path to be saved in the option
			} else {
				error_log('Failed to move uploaded file.');
			}
		} else {
			// Handle file upload errors
			if (isset($_FILES['google_storage_credentials'])) {
				error_log('File upload error. Code: ' . $_FILES['google_storage_credentials']['error']);
			}
		}
		return $option;
	}


	// Callback for the OneDrive Client ID settings field
	public function onedrive_client_id_field_callback()
	{
		$option = get_option('onedrive_client_id');
		echo '<input type="text" name="onedrive_client_id" value="' . esc_attr($option) . '" />';
	}

	// Callback for the OneDrive Client Secret settings field
	public function onedrive_client_secret_field_callback()
	{
		$option = get_option('onedrive_client_secret');
		echo '<input type="text" name="onedrive_client_secret" value="' . esc_attr($option) . '" />';
	}

	// Callback for the OneDrive Tenant ID settings field
	public function onedrive_tenant_id_field_callback()
	{
		$option = get_option('onedrive_tenant_id');
		echo '<input type="text" name="onedrive_tenant_id" value="' . esc_attr($option) . '" />';
	}

	// Callback for the OneDrive Redirect URI settings field
	public function onedrive_redirect_uri_field_callback()
	{
		$option = get_option('onedrive_redirect_uri');
		echo '<input type="text" name="onedrive_redirect_uri" value="' . esc_attr($option) . '" />';
	}

	/**
	 * Activation hook to do actions when the plugin is activated
	 */
	public function cloud_storage_activate()
	{
		// Actions to perform on plugin activation
	}

	/**
	 * Deactivation hook to do actions when the plugin is deactivated
	 */
	public function cloud_storage_deactivate()
	{
		// Actions to perform on plugin deactivation
	}

	/**
	 * Add admin menu and submenus
	 */
	public function cloud_storage_menu()
	{
		// Main menu
		add_menu_page('Cloud Storage Settings', 'Cloud Storage', 'manage_options', 'cloud-storage-settings', array($this, 'cloud_storage_settings_page'), 'dashicons-cloud');

		// Submenu for Google Storage
		add_submenu_page('cloud-storage-settings', 'Google Storage', 'Google Storage', 'manage_options', 'google-storage', array($this, 'google_storage_submenu_page'));

		// Submenu for OneDrive Storage
		add_submenu_page('cloud-storage-settings', 'OneDrive Storage', 'OneDrive Storage', 'manage_options', 'onedrive-storage', array($this, 'onedrive_storage_submenu_page'));
	}

	/**
	 * Render main menu page
	 */
	public function cloud_storage_settings_page()
	{
		?>
		<div class="wrap">
			<h1>Cloud Storage Settings</h1>
			<p>Select a service to configure API settings:</p>
		</div>
		<?php
	}

	/**
	 * Render Google Storage submenu page
	 */
	public function google_storage_submenu_page()
	{
		if (!current_user_can('manage_options')) {
			return;
		}

		// Google Storage API settings form will go here
		?>
		<div class="wrap">
			<h1>Google Storage Settings</h1>
			<p><?php
			echo 'use this shortcode to display recent files: <code>[google_storage_recent_files bucket="my-bucket" limit="5"]</code><br>';
			echo 'use this shortcode to display available and used space: <code>[google_storage_space bucket="my-bucket"]</code>';
			?></p>
			<form method="POST" action="options.php" enctype="multipart/form-data">
				<?php
				//fields to save google cloud storage settings api
				settings_fields('google-storage-settings');
				do_settings_sections('google-storage-settings');
				submit_button('Save Settings');
				?>
			</form>
		</div>
		<?php
	}

	/**
	 * Render OneDrive Storage submenu page
	 */
	public function onedrive_storage_submenu_page()
	{
		if (!current_user_can('manage_options')) {
			return;
		}

		// OneDrive Storage API settings form will go here
		?>
		<div class="wrap">
			<h1>OneDrive Storage Settings</h1>
			<p><?php
			echo 'use this shortcode to display recent files: <code>[onedrive_storage_recent_files]</code><br>';
			echo 'use this shortcode to display available and used space: <code>[onedrive_storage_space]</code>';
			?></p>
			<form method="POST" action="options.php" enctype="multipart/form-data">
				<?php
				echo do_shortcode('[onedrive_storage_space]');
				settings_fields('onedrive-storage');
				do_settings_sections('onedrive-storage');
				submit_button('Save Settings');
				?>
			</form>
		</div>
		<?php
	}

	//shortcode for google storage recent files
	public function google_storage_recent_files($atts)
	{
		$atts = shortcode_atts(
			array(
				'bucket' => 'my-bucket',
				'limit' => 5
			),
			$atts
		);

		$bucket = $atts['bucket'];
		$limit = $atts['limit'];

		$storage = new StorageClient([
			'keyFilePath' => get_option('google_storage_credentials')
		]);

		$bucket = $storage->bucket($bucket);
		$objects = $bucket->objects(['maxResults' => $limit]);
		//add style for the list
		$html = '<style>
			ul.google-storage-list-files{	
				list-style-type: none;
				display: flex;
				gap: 10px;
			} 
			.google-storage-list-files li{ 
				border: 1px solid #ccc;
				margin-bottom: 10px;
				padding: 10px; width: 20%;
				position: relative;
			}
			.google-storage-list-files .extension{
				position: absolute;
				top: 60px;
				left: 35px;
				color: #f00;
				text-transform: uppercase;
			}
			</style>';
		$html .= '<ul class="google-storage-list-files">';
		//show file icon if it was file and show folder icon if it was folder show name and extension
		foreach ($objects as $object) {
			$objectInfo = $object->info();
			$objectName = $objectInfo['name'];
			$objectType = $objectInfo['contentType'];
			$objectSize = $objectInfo['size'];
			$isFolder = substr($objectName, -1) === '/';
			//change the size to GB or MB
			$size = $objectSize;
			if ($size >= 1073741824) {
				$objectSize = number_format($size / 1073741824, 2) . ' GB';
			} elseif ($size >= 1048576) {
				$objectSize = number_format($size / 1048576, 2) . ' MB';
			} elseif ($size >= 1024) {
				$objectSize = number_format($size / 1024, 2) . ' KB';
			} elseif ($size > 1) {
				$objectSize = $size . ' bytes';
			} elseif ($size == 1) {
				$objectSize = $size . ' byte';
			} else {
				$objectSize = '0 bytes';
			}

			$objectUpdated = $objectInfo['updated'];
			$html .= '<li>';
			if ($isFolder) {
				$iconUrl = plugins_url('cloud-storage/images/folder.png');
			} else {
				$iconUrl = plugins_url('cloud-storage/images/file.png');
			}
			$html .= '<img style="height: 80px" src="' . $iconUrl . '" alt="' . ($isFolder ? 'Folder' : 'File') . '" />';
			$html .= '<p>' . $objectName . '</p>';
			$html .= '<p>' . $objectSize . '</p>';
			$html .= '<p>' . $objectUpdated . '</p>';
			// file extension
			if (!$isFolder) {
				$ext = pathinfo($objectName, PATHINFO_EXTENSION);
				$html .= '<span class="extension">' . $ext . '</span>';
			}
			$html .= '</li>';
		}
		$html .= '</ul>';

		return $html;
	}

	//shortcode for google storage available and used space
	public function google_storage_space($atts)
	{
		$atts = shortcode_atts(
			array(
				'bucket' => 'my-bucket'
			),
			$atts
		);

		$bucket = $atts['bucket'];

		$storage = new StorageClient([
			'keyFilePath' => get_option('google_storage_credentials')
		]);

		$bucket = $storage->bucket($bucket);
		$space = $bucket->info();

		$html = '<p>Available space: ' . $space['storageClass'] . '</p>';

		$html .= '<p>Location: ' . $space['location'] . '</p>';
		//used space
		$totalSize = 0;
		foreach ($bucket->objects() as $object) {
			$size = $object->info()['size'];
			$totalSize += $size;
		}
		//change the size to GB or MB
		$size = $totalSize;
		if ($size >= 1073741824) {
			$totalSize = number_format($size / 1073741824, 2) . ' GB';
		} elseif ($size >= 1048576) {
			$totalSize = number_format($size / 1048576, 2) . ' MB';
		} elseif ($size >= 1024) {
			$totalSize = number_format($size / 1024, 2) . ' KB';
		} elseif ($size > 1) {
			$totalSize = $size . ' bytes';
		} elseif ($size == 1) {
			$totalSize = $size . ' byte';
		} else {
			$totalSize = '0 bytes';
		}
		$html .= '<p>Used space: ' . $totalSize . '</p>';

		return $html;
	}

	public function onedrive_storage_recent_files()
	{
		// Fetch client id and secret from your options or configuration.
		$clientId = get_option('onedrive_client_id');
		$clientSecret = get_option('onedrive_client_secret');
		$urlAccessToken = 'https://login.microsoftonline.com/36fe8e16-d57b-4e38-b456-fe8561e3b046/oauth2/v2.0/token';

		$provider = new GenericProvider([
			'clientId' => $clientId,
			'clientSecret' => $clientSecret,
			'urlAuthorize' => null,
			'urlAccessToken' => $urlAccessToken,
			'urlResourceOwnerDetails' => null,
		]);

		try {
			$accessToken = $provider->getAccessToken('client_credentials', [
				'scope' => 'https://graph.microsoft.com/.default'
			]);

			// Initialize Guzzle HTTP client.
			$graphClient = new Client();

			// Replace 'YOUR_DRIVE_ID' with the actual drive id.
			$response = $graphClient->request('GET', 'https://graph.microsoft.com/v1.0/drives/YOUR_DRIVE_ID/root/children', [
				'headers' => [
					'Authorization' => 'Bearer ' . $accessToken->getToken(),
					'Content-Type' => 'application/json',
					'Accept' => 'application/json',
				]
			]);

			$body = $response->getBody();
			$files = json_decode($body, true);

			// Display the data.
			foreach ($files['value'] as $file) {
				echo "Name: " . htmlspecialchars($file['name']) . "<br />\n";
			}
		} catch (\League\OAuth2\Client\Provider\Exception\IdentityProviderException $e) {
			error_log($e->getMessage());
			echo 'Error obtaining access token.';
		} catch (\GuzzleHttp\Exception\GuzzleException $e) {
			error_log($e->getMessage());
			echo 'Error making request to Graph API.';
		}
	}

	public function onedrive_storage_space()
	{
		// OneDrive recent files shortcode implementation
		$clientId = get_option('onedrive_client_id');
		$clientSecret = get_option('onedrive_client_secret');
		$redirectUri = get_option('onedrive_redirect_uri');
		$tenantId = get_option('onedrive_tenant_id');

		// $provider = new GenericProvider([
		// 	'clientId' => $clientId,
		// 	'clientSecret' => $clientSecret,
		// 	'urlAuthorize' => null,
		// 	'urlAccessToken' => "https://login.microsoftonline.com/$tenantId/oauth2/v2.0/token",
		// 	'urlResourceOwnerDetails' => null,
		// ]);

		// try {
		// 	$accessToken = $provider->getAccessToken('client_credentials', [
		// 		'scope' => 'https://graph.microsoft.com/.default'
		// 	]);

		// 	$graphClient = new Client();

		// 	$response = $graphClient->request('GET', 'https://graph.microsoft.com/v1.0/me/drive', [
		// 		'headers' => [
		// 			'Authorization' => 'Bearer ' . $accessToken->getToken(),
		// 			'Content-Type' => 'application/json',
		// 			'Accept' => 'application/json',
		// 		]
		// 	]);

		// 	$body = $response->getBody();
		// 	$drive = json_decode($body, true);

		// 	// Display the data.
		// 	echo "Drive ID: " . htmlspecialchars($drive['id']) . "<br />\n";
		// 	echo "Drive Type: " . htmlspecialchars($drive['driveType']) . "<br />\n";
		// 	echo "Drive Owner: " . htmlspecialchars($drive['owner']['user']['displayName']) . "<br />\n";
		// } catch (\League\OAuth2\Client\Provider\Exception\IdentityProviderException $e) {
		// 	error_log($e->getMessage());
		// 	echo 'Error obtaining access token.';
		// } catch (\GuzzleHttp\Exception\GuzzleException $e) {
		// 	error_log($e->getMessage());
		// 	echo 'Error making request to Graph API.';
		// }
	}
}

// Initialize class to register hooks and actions
new CLOUS_MT_STORAGE_API();

?>